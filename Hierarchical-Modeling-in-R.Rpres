Hierarchical modeling in R
========================================================
author: Sean Raleigh, Westminster College
date: November 10, 2017
autosize:true

Big Mountain Dev and Data Conference, Salt Lake City, UT


========================================================

<div align="center">
<img src="./images/sponsers.jpg" alt="Sponsers">
</div>


========================================================

<div align="center">
<img src="./images/Westminster_Logo_primary_night.jpg" alt="Westminster College">
</div>


========================================================

<div align="center">
<img src="./images/containers.jpg" alt="Containers" width = 75% height = 75%>
</div>


========================================================

$$
\DeclareMathOperator{\E}{E}
\DeclareMathOperator{\Var}{Var}
\DeclareMathOperator{\Cov}{Cov}
\begin{align}
Y_{ij}  &= \beta_{0j} + \beta_{1j} X_{ij} + r_{ij} \\
        & \E(r_{ij}) = 0; \Var(r_{ij}) = \sigma^{2} \\
\beta_{0j}  &= \gamma_{00} + \gamma_{01} G_{j} + U_{0j} \\
\beta_{1j}  &= \gamma_{10} + \gamma_{11} G_{j} + U_{1j} \\
        & \E(U_{0j}) = 0; \E(U_{1j}) = 0 \\
        & \E(\beta_{0j}) = \gamma_{00}; \E(\beta_{1j}) = \gamma_{01} \\
        & \Var(\beta_{0j}) = \Var(U_{0j}) = \tau_{00};
          \Var(\beta_{1j}) = \Var(U_{1j}) = \tau_{11} \\
        & \Cov(\beta_{0j}, \beta_{1j}) = \Cov(U_{0j}, U_{1j}) = \tau_{01} \\
        & \Cov(U_{0j}, r_{ij}) = \Cov(U_{1j}, r_{ij}) = 0
\end{align}
$$


Preliminaries:
========================================================

```{r}
library(tidyverse)
library(broom)
library(lme4)
library(sjPlot)
```


Example
========================================================

Patient data:

* `individual_level_data.csv`
   - `program_id`
   - `sex`
   - `score_admit`
   - `score_discharge`

```{r}
patients <- read_csv("./data/individual_level_data.csv")
patients$program_id <- factor(patients$program_id)
patients$sex <- factor(patients$sex)
```


Example
========================================================

```{r}
head(patients)
```


Example
========================================================

Program data:

* `program_level_data.csv`
   - `program_id`
   - `program_type`
   - `n`

```{r}
programs <- read_csv("./data/program_level_data.csv")
programs$program_id <- factor(programs$program_id)
programs$program_type <- factor(programs$program_type)
```


Example
========================================================

```{r}
head(programs)
```


Start simple...
========================================================
type:section

Just look at average scores.


Start simple...
========================================================

Bad Idea 1: Aggregation, AKA "Complete pooling"

```{r}
bad_idea_1 <- lm(score_discharge ~ 1,
                 data = patients) %>%
    tidy() %>%
    select(estimate)
```


Start simple...
========================================================

Bad Idea 1: Aggregation, AKA "Complete pooling"

```{r}
bad_idea_1
```

This is just the mean:

```{r}
mean(patients$score_discharge)
```


Start simple...
========================================================

Bad Idea 2: Disaggregation, AKA "No pooling"

```{r}
bad_idea_2 <- patients %>%
    group_by(program_id) %>%
    nest() %>%
    transmute(fit = map(data,
                ~ tidy(lm(score_discharge ~ 1,
                          data = .x)))) %>%
    unnest() %>%
    select(estimate)
```


Start simple...
========================================================

Bad Idea 2: Disaggregation, AKA "No pooling"

```{r}
head(bad_idea_2)
```


Start simple...
========================================================

Bad Idea 2: Disaggregation, AKA "No pooling"

These are just the program means:

```{r}
patients %>%
    group_by(program_id) %>%
    summarize(mean(score_discharge)) %>% head()
```


Start simple...
========================================================

Good idea: Hierarchical modeling, AKA "Partial pooling"

```{r}
good_idea_model <- lmer(
    score_discharge ~ (1 | program_id),
    data = patients)
```


Start simple...
========================================================

Good idea: Hierarchical modeling, AKA "Partial pooling"


```{r}
fixef(good_idea_model)
```


Start simple...
========================================================

Good idea: Hierarchical modeling, AKA "Partial pooling"

```{r}
ranef(good_idea_model)$program_id %>% head()
```


Start simple...
========================================================

Good idea: Hierarchical modeling, AKA "Partial pooling"

```{r}
good_idea <- fixef(good_idea_model) +
    ranef(good_idea_model)$program_id %>%
    rename(estimate = `(Intercept)`)
head(good_idea)
```


========================================================

```{r, echo = FALSE, fig.width = 18, fig.height = 12}
programs_plot <- programs %>%
    mutate(`No pooling` = bad_idea_2$estimate,
           `Partial pooling` = good_idea$estimate) %>%
    gather(Model, `Score at Discharge`, `No pooling`:`Partial pooling`)

slide_theme_1 <- theme(text = element_text(size = 36),
                     legend.title = element_text(size = 24),
                     legend.text = element_text(size = 24),
                     legend.key.size = unit(3,"line"),
                     axis.text.x = element_text(size = 24))

ggplot(programs_plot, aes(y = `Score at Discharge`,
                          x = program_id,
                          color = Model, size = n)) +
    geom_hline(yintercept = bad_idea_1$estimate,
               color = "blue") +
    geom_point(alpha = 0.75) +
    scale_color_manual(values = c("No pooling" = "green",
                                  "Partial pooling" = "red",
                                  "Complete pooling" = "blue"),
                       limits = c("No pooling",
                                  "Partial pooling",
                                  "Complete pooling")) +
    scale_size_continuous(guide = FALSE,
                          range = c(5,20)) +
    guides(color = guide_legend(override.aes = list(size=10))) +
    slide_theme_1

```


Add predictors
========================================================
type:section


Add predictors
========================================================

Join `patients` and `programs`

```{r}
all_data <- inner_join(patients,
                       programs,
                       by = "program_id")
```


Add predictors
========================================================

Bad Idea 1 Redux: Aggregation, AKA "Complete pooling"

```{r}
bad_idea_1_redux <-
    lm(score_discharge ~ score_admit,
       data = patients) %>%
    tidy() %>%
    select(term, estimate) %>%
    spread(term, estimate) %>%
    rename(intercept = `(Intercept)`)
```


Add predictors
========================================================

Bad Idea 1 Redux: Aggregation, AKA "Complete pooling"

```{r}
bad_idea_1_redux
```


Add predictors
========================================================

Bad Idea 2: Disaggregation, AKA "No pooling"

```{r}
bad_idea_2_redux <- patients %>%
    group_by(program_id) %>%
    nest() %>%
    transmute(fit = map(data,
        ~ tidy(lm(score_discharge ~ score_admit,
                          data = .x)))) %>%
    unnest(.id = "program_id") %>%
    mutate(program_id =
               as.integer(program_id)) %>%
    select(program_id, term, estimate) %>%
    spread(term, estimate) %>%
    rename(intercept = `(Intercept)`)
```


Add predictors
========================================================

Bad Idea 2: Disaggregation, AKA "No pooling"

```{r}
head(bad_idea_2_redux)
```


Add predictors
========================================================

Hierarchical, but still a bad idea: Varying intercepts

```{r}
var_int <- lmer(
    score_discharge ~ score_admit +
        (1 | program_id),
    data = all_data)
```



Add predictors
========================================================

Hierarchical, but still a bad idea: Varying intercepts

```{r}
fixef(var_int)
```


Add predictors
========================================================

Hierarchical, but still a bad idea: Varying intercepts

```{r}
ranef(var_int)$program_id %>% head()
```


Add predictors
========================================================

Hierarchical, but still a bad idea: Varying intercepts

```{r}
ranef(var_int)$program_id %>%
    mutate(intercept = `(Intercept)` +
               fixef(var_int)[1]) %>%
    select(-`(Intercept)`) %>% head()
```


========================================================


```{r, echo = FALSE, fig.width = 18, fig.height = 12}
slide_theme_2 <- theme(text = element_text(size = 36),
                     legend.title = element_text(size = 24),
                     legend.text = element_text(size = 24),
                     legend.key.size = unit(3,"line"),
                     axis.text.x = element_text(size = 12),
                     axis.text.y = element_text(size = 24))

plot_var_int <- sjp.lmer(var_int, type = "coef",
                         prnt.plot = FALSE,
                         free.scale = TRUE,
                         show.values = FALSE)

plot_var_int$plot + slide_theme_2
```


Add predictors
========================================================

Good idea: Varying intercepts and slopes

```{r}
var_int_slope <- lmer(
    score_discharge ~ score_admit +
        (1 + score_admit | program_id),
    data = all_data)
```


Add predictors
========================================================

Good idea: Varying intercepts and slopes

```{r}
fixef(var_int_slope)
```


Add predictors
========================================================

Good idea: Varying intercepts and slopes

```{r}
ranef(var_int_slope)$program_id %>% head()
```


Add predictors
========================================================

Good idea: Varying intercepts and slopes

```{r}
good_idea_redux <-
    ranef(var_int_slope)$program_id %>%
    mutate(intercept = `(Intercept)` +
               fixef(var_int_slope)[1],
           score_admit = score_admit +
               fixef(var_int_slope)[2]) %>%
    select(-`(Intercept)`) %>%
    rownames_to_column("program_id") %>%
    select(program_id, intercept, score_admit)
```


Add predictors
========================================================

Good idea: Varying intercepts and slopes

```{r}
head(good_idea_redux)
```


========================================================

```{r, echo = FALSE, fig.width = 18, fig.height = 12}
plot_var_int_slope <- sjp.lmer(var_int_slope, type = "coef",
                               prnt.plot = FALSE,
                               free.scale = TRUE,
                               show.values = FALSE)

plot_var_int_slope$plot + slide_theme_2
```


========================================================

```{r, echo = FALSE, fig.width = 18, fig.height = 12}
first_six <- all_data %>%
    filter(program_id %in% 1:6)

ggplot(first_six, aes(y = score_discharge, x = score_admit)) +
    facet_wrap("program_id") +
    geom_point() +
    geom_abline(data = bad_idea_1_redux,
                aes(intercept = intercept,
                    slope = score_admit),
                color = "blue", size = 2) +
    geom_abline(data = head(bad_idea_2_redux),
                aes(intercept = intercept,
                    slope = score_admit),
                color = "green", size = 2) +
    geom_abline(data = head(good_idea_redux),
                aes(intercept = intercept,
                    slope = score_admit),
                color = "red", size = 2) +
    theme(text = element_text(size = 36))
```


========================================================

<div align="center">
<img src="./images/Gelman_Hill.gif"
alt="Gelman and Hill textbook">
</div>


Thank you!
========================================================
type:section

[sraleigh@westminstercollege.edu](mailto:sraleigh@westminstercollege.edu)

[github.com/VectorPosse](https://github.com/VectorPosse)

[rpubs.com/VectorPosse](http://rpubs.com/VectorPosse)
